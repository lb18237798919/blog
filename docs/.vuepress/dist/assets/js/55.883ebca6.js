(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{418:function(e,t,a){"use strict";a.r(t);var s=a(42),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"token-服务端身份验证的流行方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#token-服务端身份验证的流行方案"}},[e._v("#")]),e._v(" Token - 服务端身份验证的流行方案")]),e._v(" "),a("h3",{attrs:{id:"简述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简述"}},[e._v("#")]),e._v(" 简述：")]),e._v(" "),a("ol",[a("li",[e._v("需要一个secret（随机数）")]),e._v(" "),a("li",[e._v("后端利用secret和加密算法(如：HMAC-SHA256)对payload(如账号密码)生成一个字符串(token)，返回前端")]),e._v(" "),a("li",[e._v("前端每次request在header中带上token")]),e._v(" "),a("li",[e._v("后端用同样的算法解密")])]),e._v(" "),a("h1",{attrs:{id:"身份认证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#身份认证"}},[e._v("#")]),e._v(" 身份认证")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("服务端提供资源给客户端，但是某些资源是"),a("strong",[e._v("有条件")]),e._v("的。所以服务端要能够识别请求者的身份，然后再判断所请求的资源是否可以给请求者。")]),e._v(" "),a("p",[e._v("token是一种身份验证的机制，初始时用户提交账号数据给服务端，服务端采用一定的策略生成一个字符串（token），token字符串中包含了少量的用户信息，并且有一定的期限。服务端会把token字符串传给客户端，客户端保存token字符串，并在接下来的请求中带上这个字符串。")]),e._v(" "),a("p",[e._v("它的工作流程大概是这样：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/3170835-b5ff425dbf277189.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/652/format/webp",alt:"img"}})]),e._v(" "),a("p",[e._v("组件图")]),e._v(" "),a("h1",{attrs:{id:"token机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#token机制"}},[e._v("#")]),e._v(" Token机制")]),e._v(" "),a("p",[e._v("在这样的流程下，我们需要考虑下面几个问题：")]),e._v(" "),a("ol",[a("li",[e._v("服务端如何根据token获取用户的信息？")]),e._v(" "),a("li",[e._v("如何确保识别"),a("strong",[e._v("伪造")]),e._v("的token？\n这里是指token不是经过服务端来生成的。")]),e._v(" "),a("li",[e._v("如何应付"),a("strong",[e._v("冒充")]),e._v("的情况？\n非法客户端拦截了合法客户端的token，然后使用这个token向服务端发送请求，冒充合法客户端。")])]),e._v(" "),a("h2",{attrs:{id:"用户匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户匹配"}},[e._v("#")]),e._v(" 用户匹配")]),e._v(" "),a("p",[e._v("服务端在生成token时，加入少量的用户信息，比如用户的id。服务端接收到token之后，可以解析出这些数据，从而将token和用户关联了起来。")]),e._v(" "),a("h2",{attrs:{id:"防伪造"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防伪造"}},[e._v("#")]),e._v(" 防伪造")]),e._v(" "),a("p",[e._v("一般情况下，建议放入token的数据是不敏感的数据，这样只要服务端使用私钥对数据生成签名，然后和数据拼接起来，作为token的一部分即可。")]),e._v(" "),a("h2",{attrs:{id:"防冒充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防冒充"}},[e._v("#")]),e._v(" 防冒充")]),e._v(" "),a("h3",{attrs:{id:"加干扰码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加干扰码"}},[e._v("#")]),e._v(" 加干扰码")]),e._v(" "),a("p",[e._v("服务端在生成token时，使用了客户端的UA作为干扰码对数据加密，客户端进行请求时，会同时传入token、UA，服务端使用UA对token解密，从而验证用户的身份。")]),e._v(" "),a("p",[e._v("如果只是把token拷贝到另一个客户端使用，不同的UA会导致在服务端解析token失败，从而实现了一定程度的防冒充。但是攻击者如果猜到服务端使用UA作为加密钥，他可以修改自己的UA。")]),e._v(" "),a("h3",{attrs:{id:"有效期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有效期"}},[e._v("#")]),e._v(" 有效期")]),e._v(" "),a("p",[e._v("给token加上有效期，即使被冒充也只是在一定的时间段内有效。这不是完美的防御措施，只是尽量减少损失。")]),e._v(" "),a("p",[e._v("服务端在生成token时，加入有效期。每次服务端接收到请求，解析token之后，判断是否已过期，如果过期就拒绝服务。")]),e._v(" "),a("h4",{attrs:{id:"token刷新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#token刷新"}},[e._v("#")]),e._v(" token刷新")]),e._v(" "),a("p",[e._v("如果token过期了，客户端应该对token续期或者重新生成token。这取决于token的过期机制。")]),e._v(" "),a("ol",[a("li",[e._v("服务器缓存token及对应的过期时间\n这个时候就可以采用续期的方式，服务器更新过期时间，token再次有效。")]),e._v(" "),a("li",[e._v("token中含有过期时间\n这个时候需要重新生成token。")])]),e._v(" "),a("p",[e._v("在token续期或者重新生成token的时候，需要额外加入数据来验证身份。因为token已经过期了，即token已经不能用来验证用户的身份了。这个时候可以请求用户重新输入账号和密码，但是用户体验稍差。")]),e._v(" "),a("p",[e._v("另一种方式是使用摘要。服务端生成token，同时生成token的摘要，然后一起返回给客户端。客户端保存摘要，一般请求只需要用到token，在刷新token时，才需要用到摘要。服务端验证摘要，来验证用户的身份。因为摘要不会频繁的在客户端和服务端之间传输，所以被截取的概率较小。")]),e._v(" "),a("h1",{attrs:{id:"token工作流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#token工作流程"}},[e._v("#")]),e._v(" Token工作流程")]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"生成token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成token"}},[e._v("#")]),e._v(" 生成token")]),e._v(" "),a("p",[a("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/3170835-60d815fbd936577a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/432/format/webp",alt:"img"}})]),e._v(" "),a("p",[e._v("生成token")]),e._v(" "),a("p",[e._v("一般在登录的时候生成token。Token管理者负责根据用户的数据生成token和摘要，摘要用来给APP端刷新token用，类似于"),a("a",{attrs:{href:"https://link.jianshu.com?t=https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419317853&lang=zh_CN",target:"_blank",rel:"noopener noreferrer"}},[e._v("微信登录"),a("OutboundLink")],1),e._v("中的refresh_token。")]),e._v(" "),a("p",[e._v("生成token的过程中，ua的充作干扰码。没有相同的ua，就无法解析生成的token字符串。如果客户端是混合开发的模式，生成token和使用token的代理可能不同（比如一个是h5，一个是原生），ua就会不同，token就无法成功的使用。可以选择其他的客户端数据作为干扰码，注意考虑下面的问题：")]),e._v(" "),a("ol",[a("li",[e._v("不同的客户端，干扰码应该不同\n干扰码的很大一个作用是防冒充，如果选择的充当干扰码的客户端数据没有区分性，就达不到效果。")]),e._v(" "),a("li",[e._v("选择充当干扰码的数据，在哪些情况下会变化？这些情况是否合理？\n比如干扰码数据中含有app的版本号，那么app版本升级就会导致干扰码变化。服务端根据新的干扰码，无法解析旧的token，此时用户必须重新登录。这种情况是合理的吗？如果不合理，干扰码中就不应该含有app的版本号。")])]),e._v(" "),a("h2",{attrs:{id:"拦截验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拦截验证"}},[e._v("#")]),e._v(" 拦截验证")]),e._v(" "),a("p",[a("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/3170835-1a2f9f20e337cf30.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/581/format/webp",alt:"img"}})]),e._v(" "),a("p",[e._v("拦截验证")]),e._v(" "),a("p",[e._v("客户端的每一次请求，都必须携带token、ua，拦截器会对敏感资源的访问进行拦截，然后根据ua解析token，解析不成功，表示token和ua不匹配。解析成功之后，判断token是否已过期，如果是，拒绝服务。所有都ok的情况下，拦截器放行，请求传达到业务服务者。")]),e._v(" "),a("h2",{attrs:{id:"token刷新-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#token刷新-2"}},[e._v("#")]),e._v(" token刷新")]),e._v(" "),a("p",[a("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/3170835-927164e92bde2055.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/464/format/webp",alt:"img"}})]),e._v(" "),a("p",[e._v("token刷新")]),e._v(" "),a("p",[e._v("当token过期，用户需要刷新token。刷新token本质上是这样的：")]),e._v(" "),a("blockquote",[a("p",[e._v("服务端：这个token是你的吗？\n客户端：是的。\n服务端：当初我给你token的时候，还给了一个摘要，你把摘要拿过来证明。")])]),e._v(" "),a("p",[e._v("客户端需要把token、摘要、ua都传给服务端，服务端对token重新生成摘要，通过判断两个摘要是否相同来验证"),a("strong",[e._v("这次请求刷新token的客户端，是不是上次请求生成token的客户端")]),e._v("。验证通过，服务端需要使用用户数据重新生成token，用户数据则来自用ua解析token的结果。")]),e._v(" "),a("h1",{attrs:{id:"基于-token-的身份验证-json-web-token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于-token-的身份验证-json-web-token"}},[e._v("#")]),e._v(" 基于 Token 的身份验证：JSON Web Token")]),e._v(" "),a("p",[e._v("很多大型网站也都在用，比如 Facebook，Twitter，Google+，Github 等等，比起传统的身份验证方法，Token 扩展性更强，也更安全点，非常适合用在 Web 应用或者移动应用上。Token 的中文有人翻译成 “令牌”，我觉得挺好，意思就是，你拿着这个令牌，才能过一些关卡。")]),e._v(" "),a("p",[e._v("文章先介绍了一下传统身份验证与基于 JWT 身份验证的方法，再理解一下 JWT 的 Token 的组成部分（头部，数据，签名），最后我们会在一个 Node.js 项目上实施签发与验证 JWT 的功能。")]),e._v(" "),a("h2",{attrs:{id:"传统身份验证的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传统身份验证的方法"}},[e._v("#")]),e._v(" 传统身份验证的方法")]),e._v(" "),a("p",[e._v("HTTP 是一种没有状态的协议，也就是它并不知道是谁是访问应用。这里我们把用户看成是客户端，客户端使用用户名还有密码通过了身份验证，不过下回这个客户端再发送请求时候，还得再验证一下。")]),e._v(" "),a("p",[e._v("解决的方法就是，当用户请求登录的时候，如果没有问题，我们在服务端生成一条记录，这个记录里可以说明一下登录的用户是谁，然后把这条记录的 ID 号发送给客户端，客户端收到以后把这个 ID 号存储在 Cookie 里，下次这个用户再向服务端发送请求的时候，可以带着这个 Cookie ，这样服务端会验证一个这个 Cookie 里的信息，看看能不能在服务端这里找到对应的记录，如果可以，说明用户已经通过了身份验证，就把用户请求的数据返回给客户端。")]),e._v(" "),a("p",[e._v("上面说的就是 Session，我们需要在服务端存储为登录的用户生成的 Session ，这些 Session 可能会存储在内存，磁盘，或者数据库里。我们可能需要在服务端定期的去清理过期的 Session 。")]),e._v(" "),a("h2",{attrs:{id:"基于-token-的身份验证方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于-token-的身份验证方法"}},[e._v("#")]),e._v(" 基于 Token 的身份验证方法")]),e._v(" "),a("p",[e._v("使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：")]),e._v(" "),a("ol",[a("li",[e._v("客户端使用用户名跟密码请求登录")]),e._v(" "),a("li",[e._v("服务端收到请求，去验证用户名与密码")]),e._v(" "),a("li",[e._v("验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端")]),e._v(" "),a("li",[e._v("客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里")]),e._v(" "),a("li",[e._v("客户端每次向服务端请求资源的时候需要带着服务端签发的 Token")]),e._v(" "),a("li",[e._v("服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据")])]),e._v(" "),a("h2",{attrs:{id:"jwt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jwt"}},[e._v("#")]),e._v(" JWT")]),e._v(" "),a("p",[e._v("实施 Token 验证的方法挺多的，还有一些标准方法，比如 JWT，读作："),a("em",[e._v("jot")]),e._v(" ，表示：JSON Web Tokens 。JWT 标准的 Token 有三个部分：")]),e._v(" "),a("ul",[a("li",[e._v("header（头部）")]),e._v(" "),a("li",[e._v("payload（数据）")]),e._v(" "),a("li",[e._v("signature（签名）")])]),e._v(" "),a("p",[e._v("中间用点分隔开，并且都会使用 Base64 编码，所以真正的 Token 看起来像这样：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ.SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc\n")])])]),a("h3",{attrs:{id:"header"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#header"}},[e._v("#")]),e._v(" Header")]),e._v(" "),a("p",[e._v("每个 JWT token 里面都有一个 header，也就是头部数据。里面包含了使用的算法，这个 JWT 是不是带签名的或者加密的。主要就是说明一下怎么处理这个 JWT token 。")]),e._v(" "),a("p",[e._v("头部里包含的东西可能会根据 JWT 的类型有所变化，比如一个加密的 JWT 里面要包含使用的加密的算法。唯一在头部里面要包含的是 "),a("em",[e._v("alg")]),e._v(" 这个属性，如果是加密的 JWT，这个属性的值就是使用的签名或者解密用的算法。如果是未加密的 JWT，这个属性的值要设置成 "),a("em",[e._v("none")]),e._v("。")]),e._v(" "),a("p",[e._v("示例：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n  "alg": "HS256"\n}\n')])])]),a("p",[e._v("意思是这个 JWT 用的算法是 HS256。上面的内容得用 "),a("a",{attrs:{href:"https://tools.ietf.org/html/rfc4648#section-5",target:"_blank",rel:"noopener noreferrer"}},[e._v("base64url"),a("OutboundLink")],1),e._v(" 的形式编码一下，所以就变成这样：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("eyJhbGciOiJIUzI1NiJ9\n")])])]),a("h3",{attrs:{id:"payload"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#payload"}},[e._v("#")]),e._v(" Payload")]),e._v(" "),a("p",[e._v("Payload 里面是 Token 的具体内容，这些内容里面有一些是标准字段，你也可以添加其它需要的内容。下面是标准字段：")]),e._v(" "),a("ul",[a("li",[e._v("iss：Issuer，发行者")]),e._v(" "),a("li",[e._v("sub：Subject，主题")]),e._v(" "),a("li",[e._v("aud：Audience，观众")]),e._v(" "),a("li",[e._v("exp：Expiration time，过期时间")]),e._v(" "),a("li",[e._v("nbf：Not before")]),e._v(" "),a("li",[e._v("iat：Issued at，发行时间")]),e._v(" "),a("li",[e._v("jti：JWT ID")])]),e._v(" "),a("p",[e._v("比如下面这个 Payload ，用到了 "),a("em",[e._v("iss")]),e._v(" 发行人，还有 "),a("em",[e._v("exp")]),e._v(" 过期时间这两个标准字段。另外还有两个自定义的字段，一个是 "),a("em",[e._v("name")]),e._v(" ，还有一个是 "),a("em",[e._v("admin")]),e._v(" 。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n "iss": "ninghao.net",\n "exp": "1438955445",\n "name": "wanghao",\n "admin": true\n}\n')])])]),a("p",[e._v("使用 base64url 编码以后就变成了这个样子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ\n")])])]),a("h3",{attrs:{id:"signature"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#signature"}},[e._v("#")]),e._v(" Signature")]),e._v(" "),a("p",[e._v("JWT 的最后一部分是 Signature ，这部分内容有三个部分，先是用 Base64 编码的 header.payload ，再用加密算法加密一下，加密的时候要放进去一个 Secret ，这个相当于是一个密码，这个密码秘密地存储在服务端。")]),e._v(" "),a("ul",[a("li",[e._v("header")]),e._v(" "),a("li",[e._v("payload")]),e._v(" "),a("li",[e._v("secret")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const encodedString = base64UrlEncode(header) + \".\" + base64UrlEncode(payload); \nHMACSHA256(encodedString, 'secret');\n")])])]),a("p",[e._v("处理完成以后看起来像这样：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc\n")])])]),a("p",[e._v("最后这个在服务端生成并且要发送给客户端的 Token 看起来像这样：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ.SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc\n")])])]),a("p",[e._v("客户端收到这个 Token 以后把它存储下来，下回向服务端发送请求的时候就带着这个 Token 。服务端收到这个 Token ，然后进行验证，通过以后就会返回给客户端想要的资源。")]),e._v(" "),a("h2",{attrs:{id:"签发与验证-jwt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#签发与验证-jwt"}},[e._v("#")]),e._v(" 签发与验证 JWT")]),e._v(" "),a("p",[e._v("在应用里实施使用基于 JWT 这种 Token 的身份验证方法，你可以先去找一个签发与验证 JWT 的功能包。无论你的后端应用使用的是什么样的程序语言，系统，或者框架，你应该都可以找到提供类似功能的包。")]),e._v(" "),a("p",[e._v("下面我们在一个 Node.js 项目里，用最简单的方式来演示一下签发还有验证 JWT 的方法。")]),e._v(" "),a("h3",{attrs:{id:"准备项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#准备项目"}},[e._v("#")]),e._v(" 准备项目")]),e._v(" "),a("p",[e._v("准备一个简单的 Node.js 项目：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("cd ~/desktop\nmkdir jwt-demo\ncd jwt-demo\nnpm init -y\n")])])]),a("p",[e._v("安装签发与验证 JWT 的功能包，我用的叫 "),a("a",{attrs:{href:"https://github.com/auth0/node-jsonwebtoken",target:"_blank",rel:"noopener noreferrer"}},[a("em",[e._v("jsonwebtoken")]),a("OutboundLink")],1),e._v("，在项目里安装一下这个包：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install jsonwebtoken --save\n")])])]),a("h3",{attrs:{id:"签发-jwt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#签发-jwt"}},[e._v("#")]),e._v(" 签发 JWT")]),e._v(" "),a("p",[e._v("在项目里随便添加一个 .js 文件，比如 "),a("em",[e._v("index.js")]),e._v("，在文件里添加下面这些代码：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const jwt = require('jsonwebtoken')\n\n// Token 数据\nconst payload = {\n  name: 'wanghao',\n  admin: true\n}\n\n// 密钥\nconst secret = 'ILOVENINGHAO'\n\n// 签发 Token\nconst token = jwt.sign(payload, secret, { expiresIn: '1day' })\n\n// 输出签发的 Token\nconsole.log(token)\n")])])]),a("p",[e._v("非常简单，就是用了刚刚为项目安装的 jsonwebtoken 里面提供的 jwt.sign 功能，去签发一个 token。这个 sign 方法需要三个参数：")]),e._v(" "),a("ol",[a("li",[a("em",[e._v("playload")]),e._v("：签发的 token 里面要包含的一些数据。")]),e._v(" "),a("li",[a("em",[e._v("secret")]),e._v("：签发 token 用的密钥，在验证 token 的时候同样需要用到这个密钥。")]),e._v(" "),a("li",[a("em",[e._v("options")]),e._v("：一些其它的选项。")])]),e._v(" "),a("p",[e._v("在命令行下面，用 "),a("em",[e._v("node")]),e._v(" 命令，执行一下项目里的 "),a("em",[e._v("index.js")]),e._v(" 这个文件（"),a("em",[e._v("node index.js")]),e._v("），会输出应用签发的 "),a("em",[e._v("token")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlLCJpYXQiOjE1MjkwMzM5MDYsImV4cCI6MTUyOTEyMDMwNn0.DctA2QlUCrM6wLWkIO78wBVN0NLpjoIq4T5B_2WJ-PU\n")])])]),a("p",[e._v("上面的 Token 内容并没有加密，所以如果用一些 JWT 解码功能，可以看到 Token 里面包含的内容，内容由三个部分组成，像这样：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// header\n{\n  "alg": "HS256", \n  "typ": "JWT"\n}\n\n// payload\n{\n  "admin": true, \n  "iat": 1529033906, \n  "name": "wanghao", \n  "exp": 1529120306\n}\n\n// signature\nDctA2QlUCrM6wLWkIO78wBVN0NLpjoIq4T5B_2WJ-PU\n')])])]),a("p",[e._v("假设用户通过了某种身份验证，你就可以使用上面的签发 Token 的功能为用户签发一个 Token。一般在客户端那里会把它保存在 Cookie 或 LocalStorage 里面。")]),e._v(" "),a("p",[e._v("用户下次向我们的应用请求受保护的资源的时候，可以在请求里带着我们给它签发的这个 Token，后端应用收到请求，检查签名，如果验证通过确定这个 Token 是我们自己签发的，那就可以为用户响应回他需要的资源。")]),e._v(" "),a("h3",{attrs:{id:"验证-jwt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#验证-jwt"}},[e._v("#")]),e._v(" 验证 JWT")]),e._v(" "),a("p",[e._v("验证 JWT 的用效性，确定一下用户的 JWT 是我们自己签发的，首先要得到用户的这个 JWT Token，然后用 "),a("em",[e._v("jwt.verify")]),e._v(" 这个方法去做一下验证。这个方法是 Node.js 的 jsonwebtoken 这个包里提供的，在其它的应用框架或者系统里，你可能会找到类似的方法来验证 JWT。")]),e._v(" "),a("p",[e._v("打开项目的 index.js 文件，里面添加几行代码：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 验证 Token\njwt.verify(token, 'bad secret', (error, decoded) => {\n  if (error) {\n    console.log(error.message)\n    return\n  }\n  console.log(decoded)\n})\n")])])]),a("p",[e._v("把要验证的 Token 数据，还有签发这个 Token 的时候用的那个密钥告诉 "),a("em",[e._v("verify")]),e._v(" 这个方法，在一个回调里面有两个参数，"),a("em",[e._v("error")]),e._v(" 表示错误，"),a("em",[e._v("decoded")]),e._v(" 是解码之后的 Token 数据。")]),e._v(" "),a("p",[e._v("执行：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("node ~/desktop/jwt-demo/index.js\n")])])]),a("p",[e._v("输出：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlLCJpYXQiOjE1MjkwMzQ3MzMsImV4cCI6MTUyOTEyMTEzM30.swXojmu7VimFu3BoIgAxxpmm2J05dvD0HT3yu10vuqU\n\ninvalid signature\n")])])]),a("p",[e._v("注意输出了一个 invalid signature ，表示 Token 里的签名不对，这是因为我们组长 "),a("em",[e._v("verify")]),e._v(" 方法提供的密钥并不是签发 Token 的时候用的那个密钥。这样修改一下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("jwt.verify(token, secret, (error, decoded) => { ...\n")])])]),a("p",[e._v("再次运行，会输出类似的数据：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlLCJpYXQiOjE1MjkwMzUzODYsImV4cCI6MTUyOTEyMTc4Nn0.mkNrt4TfcfmP22xd3C_GQn8qnUmlB39dKT9SpIBTBGI\n\n{ name: 'wanghao', admin: true, iat: 1529035386, exp: 1529121786 }\n")])])]),a("h3",{attrs:{id:"rs256-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rs256-算法"}},[e._v("#")]),e._v(" RS256 算法")]),e._v(" "),a("p",[e._v("默认签发还有验证 Token 的时候用的是 HS256 算法，这种算法需要一个密钥（密码）。我们还可以使用 RS256 算法签发与验证 JWT。这种方法可以让我们分离开签发与验证，签发时需要用一个密钥，验证时使用公钥，也就是有公钥的地方只能做验证，但不能签发 JWT。")]),e._v(" "),a("p",[e._v("在项目下面创建一个新的目录，里面可以存储即将生成的密钥与公钥文件。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("cd ~/desktop/jwt-demo\nmkdir config\ncd config\n")])])]),a("h4",{attrs:{id:"密钥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#密钥"}},[e._v("#")]),e._v(" 密钥")]),e._v(" "),a("p",[e._v("先生成一个密钥文件：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ssh-keygen -t rsa -b 2048 -f private.key\n")])])]),a("h4",{attrs:{id:"公钥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#公钥"}},[e._v("#")]),e._v(" 公钥")]),e._v(" "),a("p",[e._v("基于上面生成的密钥，再去创建一个对应的公钥：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("openssl rsa -in private.key -pubout -outform PEM -out public.key\n")])])]),a("h3",{attrs:{id:"签发-jwt-rs256-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#签发-jwt-rs256-算法"}},[e._v("#")]),e._v(" 签发 JWT（RS256 算法）")]),e._v(" "),a("p",[e._v("用 RS256 算法签发 JWT 的时候，需要从文件系统上读取创建的密钥文件里的内容。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const fs = require('fs')\n\n// 获取签发 JWT 时需要用的密钥\nconst privateKey = fs.readFileSync('./config/private.key')\n")])])]),a("p",[e._v("签发仍然使用 jwt.sign 方法，只不过在选项参数里特别说明一下使用的算法是 RS256：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 签发 Token\nconst tokenRS256 = jwt.sign(payload, privateKey, { algorithm: 'RS256' })\n\n// 输出签发的 Token\nconsole.log('RS256 算法：', tokenRS256)\n")])])]),a("h2",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])])])}),[],!1,null,null,null);t.default=n.exports}}]);