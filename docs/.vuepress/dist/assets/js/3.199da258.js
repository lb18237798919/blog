(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{360:function(t,s,a){t.exports=a.p+"assets/img/constructor.f7283cf3.jpg"},361:function(t,s,a){t.exports=a.p+"assets/img/prototype.be34db90.jpg"},362:function(t,s,a){t.exports=a.p+"assets/img/funobj.b3434f97.jpg"},395:function(t,s,a){"use strict";a.r(s);var n=a(42),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"对象-类-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象-类-函数"}},[t._v("#")]),t._v(" 对象&类&函数")]),t._v(" "),n("p",[t._v("可以先看看es5中如何通过 "),n("font",{attrs:{color:"#3EAF7C"}},[n("strong",[t._v("构造函数")])]),t._v("生成 "),n("font",{attrs:{color:"#3EAF7C"}},[n("strong",[t._v("实例对象")])]),t._v(" 。")],1),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" f "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1")]),t._v("\n")])])]),n("p",[t._v("上面有提到 "),n("font",{attrs:{color:"#3EAF7C"}},[n("strong",[t._v("构造函数")])]),t._v("和 "),n("font",{attrs:{color:"#3EAF7C"}},[n("strong",[t._v("实例对象")])]),t._v("，那这两者又是什么呢。")],1),t._v(" "),n("h2",{attrs:{id:"构造函数与实例对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构造函数与实例对象"}},[t._v("#")]),t._v(" 构造函数与实例对象")]),t._v(" "),n("p",[t._v("我对构造函数的理解是：构造函数从表现形式来说的话，就是执行的时候 "),n("font",{attrs:{color:"#FA8072"}},[t._v("new")]),t._v(" 执行，函数变成一个类，而返回结果就是类的一个实例。")],1),t._v(" "),n("p",[t._v("（2020.8.14,通过查阅 "),n("font",{attrs:{color:"#FA8072"}},[t._v("ECMAScritp262")]),t._v(" 后得知构造函数的由来，其实构造函数的另外两种官方名称是 "),n("font",{attrs:{color:"#3EAF7C"}},[n("strong",[t._v("构造器")])]),t._v(" 或者"),n("font",{attrs:{color:"#3EAF7C"}},[n("strong",[t._v("构造函数对象")])]),t._v("。而构造函数依赖于两种内置方法 "),n("code",[t._v("[[Call]]")]),t._v(" 和 "),n("code",[t._v("[[Construct]]")]),t._v("。支持内部方法 "),n("code",[t._v("[[Call]]")]),t._v(" 的对象就叫做"),n("font",{attrs:{color:"#3EAF7C"}},[n("strong",[t._v("函数对象")])]),t._v(",支持 "),n("code",[t._v("[[Construct]]")]),t._v(" 内部方法的对象叫做构造器，而支持 "),n("code",[t._v("[[Construct]]")]),t._v(" 的每个对象都必须支持 "),n("code",[t._v("[[Call]]")]),t._v("。也就是说，每个构造器都必须是一个函数对象。所以构造器也可以称为构造函数或构造函数对象。）")],1),t._v(" "),n("p",[t._v("那么 "),n("font",{attrs:{color:"#FA8072"}},[t._v("new")]),t._v(" 调用的函数在调用时经历了什么？  或者说构造函数的执行步骤是什么？")],1),t._v(" "),n("blockquote",[n("ol",[n("li",[t._v("像普通函数执行一样，形成私有作用域。")]),t._v(" "),n("li",[t._v("在js代码自上而下执行之前，首先会在当前形成的私有栈中创建一个空对象，并让函数中的执行主体 this 指向这个对象。")]),t._v(" "),n("li",[t._v("代码开始自上而下执行。")]),t._v(" "),n("li",[t._v("代码执行完成，把之前创建的对象地址返回。")])])]),t._v(" "),n("p",[t._v("如图：\n"),n("a",{attrs:{"data-fancybox":"",title:"构造函数",href:"/blog/assets/img/constructor.f7283cf3.jpg"}},[n("img",{attrs:{src:a(360),alt:"构造函数"}})]),t._v("\n由此可以得出，开始创建的对象其实就是当前 "),n("font",{attrs:{color:"#FA8072"}},[t._v("Fn")]),t._v(" 这个类的一个实例，让 "),n("font",{attrs:{color:"#FA8072"}},[t._v("this")]),t._v(" 指向这个实例，就相当于代码执行中 "),n("code",[t._v("this.xxx =xxx")]),t._v(" 都是在给实例设置 "),n("font",{attrs:{color:"#3EAF7C"}},[n("strong",[t._v("'私有属性'")])]),t._v("，最后浏览器会把默认创建的实例返回，供外面接收。")],1),t._v(" "),n("p",[t._v("再次执行  "),n("code",[t._v("new Fn")]),t._v(" ,就是把上面的操作克隆一份，会形成新的实例(新的内存空间，堆内存)，所以说实例的特性是 "),n("font",{attrs:{color:"#3EAF7C"}},[n("strong",[t._v("独立分开")])]),t._v(" 的。如下：")],1),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" f "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" f1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])]),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("构造函数执行，如果不写 return ，浏览器会默认返回创建的实例，但是如果写了 return，就有两种情况：")]),t._v(" "),n("ol",[n("li",[t._v("return 是一个基本值，返回的结果依然是类的实例，没有受到影响。")]),t._v(" "),n("li",[t._v("如果返回的是引用值，则会把默认返回的实例覆盖，此时接收到结果就不再是当前类的实例。")])])]),t._v(" "),n("p",[t._v("如下：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//return 基本值")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" f "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//return 引用值")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" f "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//undefined")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1")]),t._v("\n")])])]),n("h2",{attrs:{id:"单例设计模式-singleton-pattern"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单例设计模式-singleton-pattern"}},[t._v("#")]),t._v(" 单例设计模式(singleton pattern)")]),t._v(" "),n("p",[t._v("对于实例的特性是单独分开的，可以引申出一个知识点：单例设计模式。")]),t._v(" "),n("p",[t._v("可以先看看单例设计模式的表现形式是怎样的。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//没错这就是单例设计模式")]),t._v("\n")])])]),n("p",[t._v("对于单例设计模式来说，它的作用就是把描述同一件事物的属性和特征进行分组，归类(存储在同一个堆内存空间中，因此避免了全局变量之间的冲突和污染)。")]),t._v(" "),n("p",[t._v("在单例设计模式这种构造模型当中， "),n("font",{attrs:{color:"#FA8072"}},[t._v("obj")]),t._v(" 不仅仅是对象名，它也被称为"),n("font",{attrs:{color:"#3EAF7C"}},[n("strong",[t._v("命名空间")])]),t._v("，"),n("font",{attrs:{color:"#FA8072"}},[t._v("[namespace]")]),t._v(",把描述事物的属性存放到命名空间中，多个命名空间是独立的，互不冲突，所以称为单例。")],1),t._v(" "),n("p",[n("strong",[t._v("高级单例模式")])]),t._v(" "),n("p",[t._v("这种模式的用法是：在给命名空间赋值的时候，不是直接赋值一个对象，而是先执行匿名函数，形成一个私有作用域(不销毁的栈内存)，在这个私有作用域中创建了一个堆内存，把堆内存地址赋值给命名空间。如下：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nameSpace "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t\t\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\treutrn "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfn"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" fn\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("这种模式的好处：可以在私有作用域中创造很多内容(变量，函数)，哪些需要供外面调取使用的，我们暴露到返回的对象中(模块化实现的一种思想)")]),t._v(" "),n("h2",{attrs:{id:"原型与-prototype-链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原型与-prototype-链"}},[t._v("#")]),t._v(" 原型与[[Prototype]]链")]),t._v(" "),n("p",[t._v("回归正题，之前解释了 ES5 的构造函数，现在在来看看 ES6 的实现手法。ES6 提供了更接近传统语言的写法，引入了 "),n("font",{attrs:{color:"#FA8072"}},[t._v("Class")]),t._v("（类）这个概念，作为对象的模板。通过"),n("font",{attrs:{color:"#FA8072"}},[t._v("class")]),t._v(" 关键字，可以定义类。")],1),t._v(" "),n("p",[t._v("基本上，ES6 的 "),n("font",{attrs:{color:"#FA8072"}},[t._v("class")]),t._v(" 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 "),n("font",{attrs:{color:"#FA8072"}},[t._v("class")]),t._v(" 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。如下：")],1),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" f "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("可以看到上面代码中出现了一个叫 "),n("font",{attrs:{color:"#FA8072"}},[t._v("constructor")]),t._v("的单词，那这个又是什么呢？")],1),t._v(" "),n("p",[t._v("这要从函数开始说起，所有的类都是函数，这是毋庸置疑的，而所有的函数的都有一个内置的属性叫做， "),n("font",{attrs:{color:"#FA8072"}},[t._v("prototype")]),t._v("，这个属性的属性值是一个对象，而这个对象的作用就是 "),n("font",{attrs:{color:"#000000"}},[n("strong",[t._v("存储了当前类供实例调取使用的属性和方法。")])]),t._v("在这个对象中还有一个内置的属性叫做 "),n("font",{attrs:{color:"#000000"}},[n("strong",[t._v("constructor")])]),t._v("，这个属性的属性值指向的就是函数本身。")],1),t._v(" "),n("p",[t._v("供实例调取使用的属性和方法也被称为："),n("font",{attrs:{color:"#3EAF7C"}},[n("strong",[t._v("公有属性")])]),t._v(" 和   "),n("font",{attrs:{color:"#3EAF7C"}},[n("strong",[t._v("公有方法")])]),t._v("。"),n("br"),t._v("\n那么实例怎么调取使用这些属性和方法呢？")],1),t._v(" "),n("p",[t._v("这就要从对象开始说起，实例就是对象，这是毋庸置疑的，所有的对象都有一个内置的属性叫做："),n("code",[t._v("__proto__")]),t._v(",   而这个 "),n("code",[t._v("__proto__")]),t._v(" 属性"),n("font",{attrs:{color:"#000000"}},[n("strong",[t._v("指向的就是当前实例所属类的原型")])]),t._v("。如下：")],1),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xiaoming'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" f "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//xiaoming")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//xiaoming")]),t._v("\n")])])]),n("p",[t._v("上面代码可以看到 打印 "),n("font",{attrs:{color:"#FA8072"}},[t._v("f.name")]),t._v(" 也是打印出 "),n("font",{attrs:{color:"#FA8072"}},[t._v("'xiaoming'")]),t._v("，这实际上是通过 "),n("code",[t._v("[[Prototype]]")]),t._v(" 链实现的。 当引用对象的属性，如 "),n("font",{attrs:{color:"#FA8072"}},[t._v("f.name")]),t._v(" ，会触发 "),n("code",[t._v("[[Get]]")]),t._v("操作。对于默认的 "),n("code",[t._v("[[Get]]")]),t._v(" 操作来说，第一步就是检查对象本身是否有这个属性，如果有就使用它。如果没有就会使用对象的 "),n("code",[t._v("__proto__")]),t._v(" 属性通过 "),n("code",[t._v("[[Prototype]]")]),t._v(" 链机制，在当前实例所属类的原型中查找，找到了的话就使用它。如果还没有找到，就会继续向上查找，最终会找到内置基类 "),n("font",{attrs:{color:"#FA8072"}},[t._v("Object")]),t._v(" 的原型，还没有如 "),n("font",{attrs:{color:"#FA8072"}},[t._v("name")]),t._v(" 这个属性的话，就会返回 "),n("font",{attrs:{color:"#FA8072"}},[t._v("undefined")]),t._v("。")],1),t._v(" "),n("p",[t._v("如图(另一个例子，与上面代码不同)：")]),t._v(" "),n("p",[n("a",{attrs:{"data-fancybox":"",title:"prototype",href:"/blog/assets/img/prototype.be34db90.jpg"}},[n("img",{attrs:{src:a(361),alt:"prototype"}})])]),t._v(" "),n("div",{staticClass:"custom-block danger"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("实际上，在 "),n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN"),n("OutboundLink")],1),t._v(" 中有明确规定："),n("br"),t._v(" "),n("code",[t._v("Object.prototype.__proto__")]),t._v("已经从 Web 标准中删除。但它被大多数浏览器厂商所支持的今天，其存在和确切行为仅在 ECMAScript 2015 规范中被标准化为传统功能，以确保Web浏览器的兼容性。所以不再建议使用此属性，取而代之的是建议只使用 "),n("code",[t._v("Object.getPrototypeOf()")]),t._v("。")])]),t._v(" "),n("h2",{attrs:{id:"函数即对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数即对象"}},[t._v("#")]),t._v(" 函数即对象")]),t._v(" "),n("p",[t._v("总结了这么多，其实还差一个画龙点睛之笔，就可以拉通对象&类&函数三者之间的关系了。如下：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1")]),t._v("\n")])])]),n("p",[t._v("上面代码中表示的含义已经显而易见了，函数也是对象，因此可以对，对象&类&实例有一个等级划分：")]),t._v(" "),n("blockquote",[n("p",[t._v("对象：万物皆对象"),n("br"),t._v("\n类：对象的具体细分"),n("br"),t._v("\n实例：类中具体的一个事物")])]),t._v(" "),n("p",[t._v("实际上所有的函数都是Function的实例。也就是说，所有的函数也会有 "),n("code",[t._v("__proto__")]),t._v(" 这个属性。")]),t._v(" "),n("p",[t._v("如图(另一个例子)：")]),t._v(" "),n("p",[n("a",{attrs:{"data-fancybox":"",title:"prototype",href:"/blog/assets/img/funobj.b3434f97.jpg"}},[n("img",{attrs:{src:a(362),alt:"funobj"}})])])])}),[],!1,null,null,null);s.default=r.exports}}]);